/*
 * Copyright (C) 2017. The UAPI Authors
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at the LICENSE file.
 *
 * You must gained the permission from the authors if you want to
 * use the project into a commercial product
 */

// buildscript {
//     repositories {
//         jcenter()
//     }
// }

ext {
    thisRepo = 'base'
}

apply from: '.config/uapi/all.config.gradle'
apply from: '.config/uapi/base.config.gradle'
apply from: '.config/uapi/functions.gradle'

apply plugin: 'jacoco'

// allprojects {
//     buildscript {
//         repositories {
//             mavenLocal()
//             mavenCentral()
//             jcenter()
//         }
//     }

//     repositories {
//         mavenCentral()
//         jcenter()
//         maven { url "http://dl.bintray.com/typesafe/maven-releases" }
//         // maven { url 'https://jitpack.io' }  // for Spock
//     }
// }

apply from: '.config/uapi/sub.config.gradle'

// subprojects {
//     apply plugin: 'java'
//     apply plugin: 'groovy'
//     apply plugin: 'jacoco'
//     apply plugin: 'maven'
//     apply plugin: 'maven-publish'

//     group = "${allCfg.group}"
//     version = getBuildVersion(project.name)
//     sourceCompatibility = 11
//     targetCompatibility = 11

//     configurations {
//         codacy
//     }

//     dependencies {
//         testCompile (
//             coordinate(libs.spock)
//         )
//         testRuntime (
//             coordinate(libs.cglib),     // allows mocking of classes (in addition to interfaces)
//             coordinate(libs.objenesis)  // allows mocking of classes without default constructor (together with CGLIB)
//         )
//     }

//     ext.moduleName = "${project.name}"

//     compileJava {
//         inputs.property("moduleName", moduleName)
//         doFirst {
//             options.compilerArgs = [
//                     '--module-path', classpath.asPath,
//             ]
//             classpath = files()
//         }
//     }

//     jar {
//         manifest.attributes
//         exclude('**/*.java')
//     }

//     task sourcesJar(type: Jar, dependsOn: classes) {
//         classifier = 'sources'
//         from sourceSets.main.allSource
//     }

//     artifacts {
//         archives sourcesJar
//     }

//     jacoco {
//         toolVersion = libs.jacoco.version
//     }

//     build.dependsOn jacocoTestReport
// }

def publishedProjects = subprojects.findAll { it.path != ':uapi.sample' }

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(publishedProjects.test)

    // additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    // sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    // classDirectories = files(publishedProjects.sourceSets.main.output)
    // executionData = files(publishedProjects.jacocoTestReport.executionData)
    getAdditionalSourceDirs().from(files(publishedProjects.sourceSets.main.allSource.srcDirs))
    getSourceDirectories().from(publishedProjects.sourceSets.main.allSource.srcDirs)
    getClassDirectories().from(publishedProjects.sourceSets.main.output)
    getExecutionData().from(files(subprojects.jacocoTestReport.executionData).filter { f -> f.exists() })

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }

    // doFirst {
    //     executionData = files(executionData.findAll { it.exists() })
    // }
}

configurations {
    codacy
}

// dependencies {
//     codacy group: 'com.codacy', name: 'codacy-coverage-reporter', version: '1.0.10'
// }

// task uploadCoverageToCodacy(type: JavaExec) {
//     main = "com.codacy.CodacyCoverageReporter"
//     classpath = configurations.codacy
//     args = [
//             "-l",
//             "Java",
//             "-r",
//             "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
//     ]
// }
